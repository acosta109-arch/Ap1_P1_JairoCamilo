@page "/Create"
@rendermode InteractiveServer
@inject ArticulosService articulosService
@inject NavigationManager navigation

<PageTitle>Crear nuevo articulo</PageTitle>
<EditForm Model="articulos" OnValidSubmit="Crear">
    <DataAnnotationsValidator/>
    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />
    <div class="container">
        <div class="card shadow-lg">
            @*Header*@
            <div class="card-header bg-success text-white">
                <h1><strong>Crear nuevo art&iacute;culo</strong></h1>
            </div>
            @*Body*@
            <div class="card-body">
                @*Datos*@
                <label for="id" class="form-label"><strong>Art&iacute;culoId</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="articulos.ArticuloId" readonly></InputNumber>

                <label for="descripcion" class="form-label"><strong>Descripci&oacute;n</strong></label>
                <InputText id="descripcion" class="form-control" @bind-Value="articulos.Descripcion"></InputText>
                <ValidationMessage For="@(()=> articulos.ArticuloId)"></ValidationMessage>

                <label for="costo" class="form-label"><strong>Costo</strong></label>
                <InputNumber id="costo" class="form-control" @bind-Value="articulos.Costo"></InputNumber>
                <ValidationMessage For="@(()=> articulos.Costo)"></ValidationMessage>

                <label for="ganancia" class="form-label"><strong>Ganancia</strong></label>
                <InputNumber id="ganancia" class="form-control" @bind-Value="articulos.Ganancia"></InputNumber>
                <ValidationMessage For="@(()=> articulos.Ganancia)"></ValidationMessage>

                <label for="precio" class="form-label"><strong>Precio</strong></label>
                <InputNumber id="precio" class="form-control" @bind-Value="articulos.Precio"></InputNumber>
                <ValidationMessage For="@(()=> articulos.Precio)"></ValidationMessage>
            </div>
            @*Footer*@
            <div class="card footer">
                <button type="button" class="btn btn-primary"><Icon Name="IconName.Arrow90DegLeft" @onclick="Volver"></Icon> Volver</button>
                <button type="submit" class="btn btn-success"><Icon Name="IconName.Floppy"></Icon> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Articulos articulos { get; set; } = new Articulos();
    public List<ToastMessage> MensajeToast { get; set; } = new List<ToastMessage>();

    public async Task<bool> Validar()
    {
        return await articulosService.ExisteArticuloConDescripcion(articulos.Descripcion);
    }

    public async Task Crear()
    {
        if(! await Validar())
        {
            await articulosService.Guardar(articulos);
            Mensaje(ToastType.Success, "Articulo guardado correctamente.");
            articulos = new Articulos();
        }
        else
        {
            Mensaje(ToastType.Danger, "El articulo no pudo ser guardado.");
        }
    }



    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }

    public void Volver()
    {
        navigation.NavigateTo("/Index");
    }
}
